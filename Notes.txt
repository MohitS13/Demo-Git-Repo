...or create a new repository on the command line
echo "# ReactJs-Basics" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/MohitS13/ReactJs-Basics.git
git push -u origin main



...or push an existing repository from the command line

git remote add origin https://github.com/MohitS13/ReactJs-Basics.git
git branch -M main
git push -u origin main


React Fragments : we can create wrapper class returning just ( return props.childern; ) rather than <div><div/>
to wrap around array of components. it will reduce the unnecessory div tags generated in DOM.

we can use <React.Fragment><React.Fragment/> OR shortcut  fragment ( <> </> ) which works the same. fragments won't
matter while rendering DOM.

React Portals : to write components as we want in return statement but to render at somewhere else than it would
normally go to.

Implementation -> create <div id="backdrop-root"><div/>  element in index.html where we will create portal.
import ReactDOM from 'react-dom';

{ ReactDOM.createPortal(<BackDrop  (configuration) /> , document.getElementById('backdrop-root') ) }

Refs (references) : to get access to other dom elements and work with that
import React ,{ useState, useRef } from 'react-dom';

in fucntional component ->
const nameInputRef = useRef();
const ageInputRef = useRef();

const changedNamedRef = nameInputRef.current.value;

nameInputRef.current.value = '';

<input
ref={ nameInputRef }
/>

browser has saperate state for inputs, which is copied to react and controlled by it, using useState.
are known as controlled components.

in useRef, we directly read and manuipulate values from browser, and hence are known as uncontrolled components.

Effects: useEffect();
useEffect(()=>{ },[ ]);
takes two arguments, one arrow function and other array if dependencies.
this hook is imported from 'react', it is used to execute code inside it's arrow function only when dependencies
are changed.

like useState. but for code inside arrow function.

Debouncing -> 

Reducers: 
const [state, dispatchfn] = useReducer(reducerFn, initialState, initFn);  

useState -> main state management tool, to manage independent state management, easy to use.
useReducer -> powerful than useState, used when more than two states are dependent on each other,
useful for complex state updates. 

Context: